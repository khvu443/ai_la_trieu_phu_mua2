// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WhoWantsToBeAMillionaire_API.DatabaseContext;

#nullable disable

namespace WhoWantsToBeAMillionaire_API.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WhoWantsToBeAMillionaire_API.Models.Answers", b =>
                {
                    b.Property<string>("answer_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("question_id")
                        .HasColumnType("int");

                    b.Property<string>("answer_content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isCorrect")
                        .HasColumnType("bit");

                    b.HasKey("answer_id", "question_id");

                    b.HasIndex("question_id");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            answer_id = "A",
                            question_id = 1,
                            answer_content = "Red",
                            isCorrect = true
                        },
                        new
                        {
                            answer_id = "B",
                            question_id = 1,
                            answer_content = "Not Blue",
                            isCorrect = false
                        },
                        new
                        {
                            answer_id = "C",
                            question_id = 1,
                            answer_content = "A",
                            isCorrect = false
                        },
                        new
                        {
                            answer_id = "D",
                            question_id = 1,
                            answer_content = "C",
                            isCorrect = false
                        },
                        new
                        {
                            answer_id = "A",
                            question_id = 2,
                            answer_content = "Lê Quân",
                            isCorrect = false
                        },
                        new
                        {
                            answer_id = "B",
                            question_id = 2,
                            answer_content = "Lê Anh Quân",
                            isCorrect = false
                        },
                        new
                        {
                            answer_id = "C",
                            question_id = 2,
                            answer_content = "Lê Quang",
                            isCorrect = true
                        },
                        new
                        {
                            answer_id = "D",
                            question_id = 2,
                            answer_content = "Lê Quâng",
                            isCorrect = false
                        });
                });

            modelBuilder.Entity("WhoWantsToBeAMillionaire_API.Models.Questions", b =>
                {
                    b.Property<int>("question_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("question_id"));

                    b.Property<string>("question_content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("question_id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            question_id = 1,
                            question_content = "Manchester is ?"
                        },
                        new
                        {
                            question_id = 2,
                            question_content = "Những thông tin này nói về ai ? BMW, showroom, Nhật Bản, Du học sinh, giấy phép lái xe B2."
                        });
                });

            modelBuilder.Entity("WhoWantsToBeAMillionaire_API.Models.Roles", b =>
                {
                    b.Property<int>("role_id")
                        .HasColumnType("int");

                    b.Property<string>("role_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("role_id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            role_id = 1,
                            role_name = "Adminstrator"
                        },
                        new
                        {
                            role_id = 2,
                            role_name = "Player"
                        });
                });

            modelBuilder.Entity("WhoWantsToBeAMillionaire_API.Models.Scores", b =>
                {
                    b.Property<int>("score_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("score_id"));

                    b.Property<int>("score")
                        .HasColumnType("int");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("score_id");

                    b.ToTable("Scores");

                    b.HasData(
                        new
                        {
                            score_id = 1,
                            score = 10,
                            user_id = 1
                        },
                        new
                        {
                            score_id = 2,
                            score = 11,
                            user_id = 2
                        },
                        new
                        {
                            score_id = 3,
                            score = 30,
                            user_id = 3
                        });
                });

            modelBuilder.Entity("WhoWantsToBeAMillionaire_API.Models.Users", b =>
                {
                    b.Property<int>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("user_id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("role_id")
                        .HasColumnType("int");

                    b.Property<int?>("score_id")
                        .HasColumnType("int");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("user_id");

                    b.HasIndex("score_id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            user_id = 1,
                            name = "Dang Nguyen Khanh Vu",
                            password = "vu1234!",
                            role_id = 1,
                            username = "vu"
                        },
                        new
                        {
                            user_id = 2,
                            name = "Le Anh Quan",
                            password = "quan1234!",
                            role_id = 2,
                            username = "quanla"
                        },
                        new
                        {
                            user_id = 3,
                            name = "Huynh Hieu Thai",
                            password = "thai1234!",
                            role_id = 2,
                            username = "thaihh"
                        },
                        new
                        {
                            user_id = 4,
                            name = "Pham Anh Quan",
                            password = "quanfpt1234!",
                            role_id = 2,
                            username = "quanpa"
                        });
                });

            modelBuilder.Entity("WhoWantsToBeAMillionaire_API.Models.Answers", b =>
                {
                    b.HasOne("WhoWantsToBeAMillionaire_API.Models.Questions", "Question")
                        .WithMany("answers")
                        .HasForeignKey("question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("WhoWantsToBeAMillionaire_API.Models.Roles", b =>
                {
                    b.HasOne("WhoWantsToBeAMillionaire_API.Models.Users", "User")
                        .WithOne("Role")
                        .HasForeignKey("WhoWantsToBeAMillionaire_API.Models.Roles", "role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WhoWantsToBeAMillionaire_API.Models.Users", b =>
                {
                    b.HasOne("WhoWantsToBeAMillionaire_API.Models.Scores", "Score")
                        .WithMany("users")
                        .HasForeignKey("score_id");

                    b.Navigation("Score");
                });

            modelBuilder.Entity("WhoWantsToBeAMillionaire_API.Models.Questions", b =>
                {
                    b.Navigation("answers");
                });

            modelBuilder.Entity("WhoWantsToBeAMillionaire_API.Models.Scores", b =>
                {
                    b.Navigation("users");
                });

            modelBuilder.Entity("WhoWantsToBeAMillionaire_API.Models.Users", b =>
                {
                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
